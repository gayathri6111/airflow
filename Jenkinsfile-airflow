pipeline{
    agent any
    environment{
        GIT_URL = "https://conduent-ghs-02.visualstudio.com/CMdS%20EDI/_git/edi-devops"
        GIT_CREDS = "azuregit"
        ACR_ID     = credentials('acr-id')
        ACR_SECRET = credentials('acr-secret')  
        ACR_NAME = "ghcmdsedidcr01"
        SIT_ACR_ID = credentials('sit-acr-id')
        SIT_ACR_SECRET = credentials('sit-acr-secret')
        SIT_ACR_NAME = "ghscmdsedisitcr01"
        DEV_CLUSTER_CONTEXT = "ghs-cmds-edi-dev-aks-c01"
        SIT_CLUSTER_CONTEXT = " ghs-cmds-edi-sit-aks-c01"
        ACR_MO_NAME = "ghscmdsedimocr01"											
        MO_ACR_ID = credentials('mo-acr-id')
        MO_ACR_SECRET = credentials('mo-acr-secret')						  
        MO_CLUSTERNAME = "ghs-cmds-edi-MO-aks-c01"
        DEV_BASEIMAGE_VERSION = "20230316172037"
        SIT_BASEIMAGE_VERSION = "20230404105417"
        

    }
    parameters{
        booleanParam(name: 'DEV_DEPLOY', defaultValue: false, description: 'Select this to deploy the dev  kafka in AWS')
        booleanParam(name: 'SIT_DEPLOY', defaultValue: false, description: 'Select this to deploy the sit kafka in AWS')
        gitParameter(name: 'BRANCH', defaultValue: 'none', description: 'Select the name of the branch you need to build and deploy', branchFilter: 'origin/(.*)', type: 'PT_BRANCH')
    }
    stages{
        stage('Checkout'){
            steps{
                cleanWs()
                script{
                    def now = new Date()
                    env.TIMESTAMP = now.format("yyyyMMddHHmmss",TimeZone.getTimeZone("America/New_York"))
                    def myGitBranch = "*/" + "${params.BRANCH}"
                    def scmVars = checkout([
                        $class: 'GitSCM', 
                        branches: [[name: "${myGitBranch}"]],
                        userRemoteConfigs: [[credentialsId: "${GIT_CREDS}",url: "${GIT_URL}"]]
                    ])
                }
            }
        }
         stage('Dev-Config'){
            when{
                expression{params.DEV_DEPLOY}
            }
            steps{
                script{

                   
                    sh """
                        cd airflow
                        sed -i -e 's#{{ACRName}}#${ACR_NAME}#' ./airflow_flower_deployment.yml
                        sed -i -e 's#{{ACRName}}#${ACR_NAME}#' ./airflow_scheduler_deployment.yaml
                        sed -i -e 's#{{ACRName}}#${ACR_NAME}#' ./airflow_webserver_deployment.yaml
                        sed -i -e 's#{{ACRName}}#${ACR_NAME}#' ./airflow_worker_deployment.yaml
                        
                        sed -i -e 's#{{BASEIMAGE_VERSION}}#${DEV_BASEIMAGE_VERSION}#' ./airflow_flower_deployment.yml
                        sed -i -e 's#{{BASEIMAGE_VERSION}}#${DEV_BASEIMAGE_VERSION}#' ./airflow_scheduler_deployment.yaml
                        sed -i -e 's#{{BASEIMAGE_VERSION}}#${DEV_BASEIMAGE_VERSION}#' ./airflow_webserver_deployment.yaml
                        sed -i -e 's#{{BASEIMAGE_VERSION}}#${DEV_BASEIMAGE_VERSION}#' ./airflow_worker_deployment.yaml

                    """
                    
                }
            }
        }
         stage('SIT-Config'){
            when{
                expression{params.SIT_DEPLOY}
            }
            steps{
                script{

                   
                    sh """
                        cd airflow
                        sed -i -e 's#{{ACRName}}#${SIT_ACR_NAME}#' ./airflow_flower_deployment.yml
                        sed -i -e 's#{{ACRName}}#${SIT_ACR_NAME}#' ./airflow_scheduler_deployment.yaml
                        sed -i -e 's#{{ACRName}}#${SIT_ACR_NAME}#' ./airflow_webserver_deployment.yaml
                        sed -i -e 's#{{ACRName}}#${SIT_ACR_NAME}#' ./airflow_worker_deployment.yaml
                        sed -i -e 's#{{ACRName}}#${SIT_ACR_NAME}#' ./airflow_service.yaml
                        
                        sed -i -e 's#{{BASEIMAGE_VERSION}}#${SIT_BASEIMAGE_VERSION}#' ./airflow_flower_deployment.yml
                        sed -i -e 's#{{BASEIMAGE_VERSION}}#${SIT_BASEIMAGE_VERSION}#' ./airflow_scheduler_deployment.yaml
                        sed -i -e 's#{{BASEIMAGE_VERSION}}#${SIT_BASEIMAGE_VERSION}#' ./airflow_webserver_deployment.yaml
                        sed -i -e 's#{{BASEIMAGE_VERSION}}#${SIT_BASEIMAGE_VERSION}#' ./airflow_worker_deployment.yaml
                        
                        
                    """
                    
                }
            }
        }      
        stage('DEV_DEPLOY'){
            when{
                expression{params.DEV_DEPLOY}
            }
            steps{
                script{
                    sh """
                        cd airflow
                        kubectl config use-context ${DEV_CLUSTER_CONTEXT}
                        kubectl delete deployment scheduler -n edi-airflow
                        kubectl delete deployment flower -n edi-airflow
                        kubectl delete deployment worker -n edi-airflow
                        kubectl delete deployment webserver -n edi-airflow
                        
                        kubectl apply -n edi-airflow -f ./airflow_flower_deployment.yml --validate=false
                        kubectl apply -n edi-airflow -f ./airflow_webserver_deployment.yaml --validate=false
                        kubectl apply -n edi-airflow -f ./airflow_scheduler_deployment.yaml --validate=false
                        kubectl apply -n edi-airflow -f ./airflow_worker_deployment.yaml --validate=false                      
                        kubectl apply -n edi-airflow -f ./airflow_service.yaml --validate=false
                        
                        
                    """
                }
            }
        }
         stage('SIT_DEPLOY'){
            when{
                expression{params.SIT_DEPLOY}
            }
            steps{
                script{
                   sh """
                        cd airflow
                        kubectl config use-context ${SIT_CLUSTER_CONTEXT}

                        


                        kubectl apply -n edi-airflow -f ./airflow_service.yaml --validate=false
                        kubectl apply -n edi-airflow -f ./airflow_flower_deployment.yml --validate=false
                        kubectl apply -n edi-airflow -f ./airflow_webserver_deployment.yaml --validate=false
                        kubectl apply -n edi-airflow -f ./airflow_worker_deployment.yaml --validate=false
                        kubectl apply -n edi-airflow -f ./airflow_scheduler_deployment.yaml --validate=false
                        
                        
                    """
                }
            }
        }
    }
}